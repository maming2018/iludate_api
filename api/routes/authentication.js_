const express = require('express')
const Twit = require('twit')
const jwt = require('jsonwebtoken')
const _ = require('lodash')
_.mixin(require('lodash-uuid'))
const router = express.Router()

const User = require('../models/user')

const twitterAuth = async (req, res, next) => {

	try {
		const twit = new Twit({
			consumer_key: process.env.TWITTER_KEY,
			consumer_secret: process.env.TWITTER_SECRET,
			access_token: req.body.accessToken,
			access_token_secret: req.body.accessTokenSecret
		})

		const twitter = (await twit.get('account/verify_credentials', { skip_status: true })).data
		req.twitter = { userId: twitter.id, username: twitter.screen_name, ...twitter.data }

		if (!twitter) {
			throw new APIError(400, 'Twitter login failed', false, true)
		}

		next()

	} catch (err) {

		err.status = 403
		err.display = 'Invalid request'

		next(err)
	}
}

// Twitter login

router.post('/twitter', twitterAuth, async (req, res, next) => {

	try {

		// Authenticate with Twitter
		const { userId, username } = req.twitter

		// Lookup existing user
		let user = await User.where({ userId }).first()
		let newUser = false

		// Create new user if needed
		if (!user) {
			await User.insert({ userId, username })
			user = (await User.where({ userId })).first()

			newUser = true
		}

		if (user.username !== username) {
			await User.query().patch({ username }).where({ userId })
		}

		if (user.banned === true) {
			throw new DetailedError(null, 403, 'You\'re banned', false, true)
		}

		console.log(user)

		// Issue auth token

		const payload = {
			userId: user.userId,
			role: user.admin === true ? 'admin' : 'user',
			client: req.headers['x-client']
		}

		const token = jwt.sign(payload, process.env.JWT_KEY)

		return res.json({ token, newUser })

	} catch (err) {
		next(err)
	}

})

// Guest login

router.post('/guest', async (req, res, next) => {

	try {

		const userId = 'guest-' + _.uuid()

		// Issue auth token

		const payload = {
			userId,
			role: 'guest',
			client: req.headers['x-client']
		}
		const token = jwt.sign(payload, process.env.JWT_KEY)

		return res.json({ token, newUser: false })

	} catch (err) {
		next(err)
	}

})

module.exports = router
